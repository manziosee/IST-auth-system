# Docker Compose configuration for IST Auth System
# Developer: Manzi Niyongira Osee
# Year: 2025

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ist-auth-postgres
    environment:
      POSTGRES_DB: ist_auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 2001
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ist-auth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ist_auth_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ist-auth-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ist-auth-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend Application
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ist-auth-backend
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ist_auth_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 2001
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      SPRING_MAIL_PORT: ${MAIL_PORT:-587}
      SPRING_MAIL_USERNAME: ${MAIL_USERNAME}
      SPRING_MAIL_PASSWORD: ${MAIL_PASSWORD}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_LINKEDIN_CLIENT_ID: ${LINKEDIN_CLIENT_ID}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_LINKEDIN_CLIENT_SECRET: ${LINKEDIN_CLIENT_SECRET}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_LINKEDIN_REDIRECT_URI: ${LINKEDIN_REDIRECT_URI:-http://localhost:8080/oauth2/success}
      APP_FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      APP_ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@ist-auth.com}
      APP_ADMIN_PASSWORD: ${ADMIN_PASSWORD:-Admin123!}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ist-auth-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend Application
  frontend:
    build:
      context: "../Frontend (FE)"
      dockerfile: Dockerfile
    container_name: ist-auth-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:8080/api
      VITE_OAUTH_LINKEDIN_CLIENT_ID: ${LINKEDIN_CLIENT_ID}
      VITE_OAUTH_REDIRECT_URI: ${LINKEDIN_REDIRECT_URI:-http://localhost:8080/oauth2/success}
      VITE_JWT_PUBLIC_KEY_URL: http://localhost:8080/.well-known/jwks.json
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ist-auth-network

networks:
  ist-auth-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
