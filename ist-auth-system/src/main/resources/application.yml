spring:
  application:
    name: ist-auth-system
  
  profiles:
    active: dev
    
  datasource:
    url: jdbc:postgresql://localhost:5432/ist_auth_db
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: 2001 
    
  h2:
    console:
      enabled: true
      path: /h2-console
      
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        format_sql: true
        
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            
  security:
    oauth2:
      client:
        registration:
          linkedin:
            client-id: ${LINKEDIN_CLIENT_ID:}
            client-secret: ${LINKEDIN_CLIENT_SECRET:}
            scope: r_liteprofile,r_emailaddress
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
        provider:
          linkedin:
            authorization-uri: https://www.linkedin.com/oauth/v2/authorization
            token-uri: https://www.linkedin.com/oauth/v2/accessToken
            user-info-uri: https://api.linkedin.com/v2/people/~:(id,firstName,lastName,emailAddress)
            user-name-attribute: id

  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      
server:
  port: ${PORT:8080}
  address: 0.0.0.0
  servlet:
    context-path: /api
    
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: when-authorized

logging:
  level:
    com.ist.auth: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web: DEBUG
    
app:
  jwt:
    access-token-expiration: 900000 # 15 minutes
    refresh-token-expiration: 604800000 # 7 days
    key-size: 2048
  
  cors:
    allowed-origins: 
      - http://localhost:3000
      - http://localhost:5173
      - https://your-frontend-domain.com
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true
    
  email:
    verification:
      expiration: 3600000 # 1 hour
      base-url: ${BASE_URL:http://localhost:8080/api}
      
  oauth:
    success-redirect: ${FRONTEND_URL:http://localhost:3000}/auth/success
    failure-redirect: ${FRONTEND_URL:http://localhost:3000}/auth/error

---
spring:
  profiles: prod
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/ist_auth}
    username: ${DB_USERNAME:ist_user}
    password: ${DB_PASSWORD:}
    driver-class-name: org.postgresql.Driver
    
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    
  h2:
    console:
      enabled: false
      
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}

# Enable Swagger in production
springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    path: /swagger-ui.html

logging:
  level:
    com.ist.auth: INFO
    org.springframework.security: WARN
    org.springframework.web: WARN
